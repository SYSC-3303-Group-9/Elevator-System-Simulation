package elevator;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;

/**
* Generated by the ElevatorSubsystem to notify the scheduler once an Elevator has arrived.
*/
public class ElevatorEvent implements Serializable {
	private static final long serialVersionUID = -8225336241141407869L;
	
	private int floor;
	private int elevatorId;
	private boolean outOfService;
	private boolean isDoorEvent;
	private Direction serviceDirection;
	
	/**
	* Creates an instance of the ElevatorEvent class
	* @param floor The floor on which the elevator has arrived
	* @param elevatorId The elevator ID that distinguishes elevators
	* @param outOfService The service state of the elevator (0 = false, 1 = true)
	* @param isDoorEvent Whether the created event is generated by a door action
	*/
	public ElevatorEvent(int floor, int elevatorId, boolean outOfService, boolean isDoorEvent, Direction serviceDirection) {
		this.floor = floor;
		this.elevatorId = elevatorId;
		this.outOfService = outOfService;
		this.isDoorEvent = isDoorEvent;
		this.serviceDirection = serviceDirection;
	}
	
	/**
	* Gets the floor on which the Elevator reached
	* @return Floor number
	*/
	public int getFloor() {
		return floor;
	}
	
	/**
	* Gets the Elevator ID
	* @return Elevator ID number
	*/
	public int getElevatorId() {
		return elevatorId;
	}
	
	/**
	 * Gets whether the created event was a door event
	 * @return boolean if event was a door event
	 */
	public boolean getIsDoorEvent() {
		return this.isDoorEvent;
	}
	
	/**
	 * Gets the service state of the elevator
	 * @return true(1) or false(0)
	 */
	public boolean getOutOfService() {
		return this.outOfService;
	}
	
	/**
	 * The direction the elevator will travel to service requests.
	 * This is not necessarily the current direction of the elevator if
	 * the elevator is empty.
	 * @return
	 */
	public Direction getServiceDirection() {
		return this.serviceDirection;
	}
	
	/**
	 * Converts an ElevatorEvent object into a byte array.
	 * 
	 * @return a byte array that corresponds to the ElevatorEvent Object
	 * @throws IOException 
	 */
	public byte[] toBytes() throws IOException {
		try (ByteArrayOutputStream bos = new ByteArrayOutputStream();
			 ObjectOutputStream out = new ObjectOutputStream(bos)) {
			out.writeObject(this);
			return bos.toByteArray();
		}
	}

	/**
	 * Converts a byte array into its corresponding ElevatorEvent.
	 * 
	 * @param bytes the byte array to be converted
	 * @return an ElevatorEvent object
	 * @throws IOException 
	 * @throws ClassNotFoundException 
	 */
	public static ElevatorEvent fromBytes(byte[] bytes) throws IOException, ClassNotFoundException {
		try (ByteArrayInputStream bis = new ByteArrayInputStream(bytes);
			 ObjectInputStream in = new ObjectInputStream(bis)) {
			return (ElevatorEvent)in.readObject();
		}
	}
	
	@Override
	public String toString() {
		if (isDoorEvent) {
			return "Elevator " + Integer.toString(elevatorId) + " opened and closed doors on floor " + Integer.toString(floor);
		} else {
			String outOfService = (this.getOutOfService()) ? "out of service." : "in service.";
			return "Elevator " + Integer.toString(elevatorId) + " arrived at floor " + Integer.toString(floor) + " and is " + outOfService;
		}
	}
	
	@Override
	public boolean equals(Object o) {
		if (o == this) {
			return true;
		}
		
		if (o instanceof ElevatorEvent) {
			ElevatorEvent other = (ElevatorEvent)o;
			return getElevatorId() == other.getElevatorId()
					&& getFloor() == other.getFloor()
					&& getOutOfService() == other.getOutOfService()
					&& getIsDoorEvent() == other.getIsDoorEvent();
		}
		return false;
	}
}
